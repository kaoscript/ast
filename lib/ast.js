// Generated by kaoscript 0.10.0
const {Helper} = require("@kaoscript/runtime");
module.exports = function() {
	var AssignmentOperatorKind = Helper.enum(Number, {
		Addition: 1,
		BitwiseAnd: 2,
		BitwiseLeftShift: 3,
		BitwiseOr: 4,
		BitwiseRightShift: 5,
		BitwiseXor: 6,
		Division: 7,
		Equality: 8,
		Existential: 9,
		Modulo: 10,
		Multiplication: 11,
		NonExistential: 12,
		NullCoalescing: 13,
		Quotient: 14,
		Subtraction: 15
	});
	var BinaryOperatorKind = Helper.enum(Number, {
		Addition: 1,
		And: 2,
		Assignment: 3,
		BitwiseAnd: 4,
		BitwiseLeftShift: 5,
		BitwiseOr: 6,
		BitwiseRightShift: 7,
		BitwiseXor: 8,
		Division: 9,
		Equality: 10,
		GreaterThan: 11,
		GreaterThanOrEqual: 12,
		Imply: 13,
		Inequality: 14,
		LessThan: 15,
		LessThanOrEqual: 16,
		Match: 17,
		Mismatch: 18,
		Modulo: 19,
		Multiplication: 20,
		NullCoalescing: 21,
		Or: 22,
		Quotient: 23,
		Subtraction: 24,
		TypeCasting: 25,
		TypeEquality: 26,
		TypeInequality: 27,
		Xor: 28
	});
	var MacroElementKind = Helper.enum(Number, {
		Expression: 1,
		Literal: 2,
		NewLine: 3
	});
	var ModifierKind = Helper.enum(Number, {
		Abstract: 1,
		Async: 2,
		AutoEvaluate: 3,
		Autofill: 4,
		Computed: 5,
		Declarative: 6,
		Descending: 7,
		Disabled: 8,
		Dynamic: 9,
		Flagged: 10,
		Forced: 11,
		Immutable: 12,
		Internal: 13,
		LateInit: 14,
		LazyInit: 15,
		Mutable: 16,
		Named: 17,
		Nullable: 18,
		Override: 19,
		Overwrite: 20,
		Private: 21,
		Protected: 22,
		Public: 23,
		Required: 24,
		Rest: 25,
		Sealed: 26,
		SetterAlias: 27,
		Static: 28,
		Systemic: 29,
		ThisAlias: 30
	});
	var NodeKind = Helper.enum(Number, {
		AccessorDeclaration: 1,
		AliasDeclaration: 2,
		ArrayBinding: 3,
		ArrayComprehension: 4,
		ArrayExpression: 5,
		ArrayRange: 6,
		ArrayType: 7,
		AttributeDeclaration: 8,
		AttributeExpression: 9,
		AttributeOperation: 10,
		AwaitExpression: 11,
		BinaryExpression: 12,
		BindingElement: 13,
		Block: 14,
		BreakStatement: 15,
		CallExpression: 16,
		CallMacroExpression: 17,
		CatchClause: 18,
		ClassDeclaration: 19,
		ClassName: 20,
		CommentBlock: 21,
		CommentLine: 22,
		ComparisonExpression: 23,
		ComputedPropertyName: 24,
		ConditionalExpression: 25,
		ContinueStatement: 26,
		CreateExpression: 27,
		CurryExpression: 28,
		DestroyStatement: 29,
		DiscloseDeclaration: 30,
		DoUntilStatement: 31,
		DoWhileStatement: 32,
		EnumDeclaration: 33,
		EnumExpression: 34,
		ExclusionType: 35,
		ExportDeclaration: 36,
		ExportDeclarationSpecifier: 37,
		ExportExclusionSpecifier: 38,
		ExportNamedSpecifier: 39,
		ExportPropertiesSpecifier: 40,
		ExportWildcardSpecifier: 41,
		ExternDeclaration: 42,
		ExternOrImportDeclaration: 43,
		ExternOrRequireDeclaration: 44,
		FallthroughStatement: 45,
		FieldDeclaration: 46,
		ForFromStatement: 47,
		ForInStatement: 48,
		ForOfStatement: 49,
		ForRangeStatement: 50,
		FunctionDeclaration: 51,
		FunctionExpression: 52,
		FusionType: 53,
		Identifier: 54,
		IfExpression: 55,
		IfStatement: 56,
		ImplementDeclaration: 57,
		ImportArgument: 58,
		ImportDeclaration: 59,
		ImportDeclarator: 60,
		ImportExclusionSpecifier: 61,
		ImportNamespaceSpecifier: 62,
		ImportReference: 63,
		ImportSpecifier: 64,
		IncludeAgainDeclaration: 65,
		IncludeDeclaration: 66,
		IncludeDeclarator: 67,
		JunctionExpression: 68,
		LambdaExpression: 69,
		Literal: 70,
		MacroDeclaration: 71,
		MacroExpression: 72,
		MemberExpression: 73,
		MethodDeclaration: 74,
		MixinDeclaration: 75,
		Module: 76,
		MutatorDeclaration: 77,
		NamedArgument: 78,
		NamespaceDeclaration: 79,
		NumericExpression: 80,
		ObjectBinding: 81,
		ObjectExpression: 82,
		ObjectMember: 83,
		ObjectType: 84,
		OmittedExpression: 85,
		Parameter: 86,
		PolyadicExpression: 87,
		PropertyDeclaration: 88,
		RegularExpression: 89,
		RequireDeclaration: 90,
		RequireOrExternDeclaration: 91,
		RequireOrImportDeclaration: 92,
		ReturnStatement: 93,
		SequenceExpression: 94,
		ShorthandProperty: 95,
		StructDeclaration: 96,
		StructField: 97,
		SurrogateDeclaration: 98,
		SwitchClause: 99,
		SwitchConditionArray: 100,
		SwitchConditionEnum: 101,
		SwitchConditionObject: 102,
		SwitchConditionRange: 103,
		SwitchConditionType: 104,
		SwitchExpression: 105,
		SwitchStatement: 106,
		SwitchTypeCasting: 107,
		TaggedTemplateExpression: 108,
		TemplateExpression: 109,
		ThisExpression: 110,
		ThrowStatement: 111,
		TraitDeclaration: 112,
		TryExpression: 113,
		TryStatement: 114,
		TupleDeclaration: 115,
		TupleField: 116,
		TypeAliasDeclaration: 117,
		TypeReference: 118,
		UnaryExpression: 119,
		UnlessExpression: 120,
		UnlessStatement: 121,
		UntilStatement: 122,
		UnionType: 123,
		VariableDeclaration: 124,
		VariableDeclarator: 125,
		WhileStatement: 126
	});
	var ReificationKind = Helper.enum(Number, {
		Argument: 1,
		Expression: 2,
		Join: 3,
		Statement: 4,
		Write: 5
	});
	var ScopeKind = Helper.enum(Number, {
		Argument: 1,
		Null: 2,
		This: 3
	});
	var UnaryOperatorKind = Helper.enum(Number, {
		BitwiseNot: 1,
		DecrementPostfix: 2,
		DecrementPrefix: 3,
		Existential: 4,
		ForcedTypeCasting: 5,
		IncrementPostfix: 6,
		IncrementPrefix: 7,
		Negation: 8,
		Negative: 9,
		NullableTypeCasting: 10,
		Spread: 11
	});
	return {
		AssignmentOperatorKind,
		BinaryOperatorKind,
		MacroElementKind,
		ModifierKind,
		NodeKind,
		ReificationKind,
		ScopeKind,
		UnaryOperatorKind
	};
};