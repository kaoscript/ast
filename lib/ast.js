// Generated by kaoscript 0.9.0
module.exports = function() {
	var AssignmentOperatorKind = {
		Addition: 1,
		BitwiseAnd: 2,
		BitwiseLeftShift: 3,
		BitwiseOr: 4,
		BitwiseRightShift: 5,
		BitwiseXor: 6,
		Division: 7,
		Equality: 8,
		Existential: 9,
		Modulo: 10,
		Multiplication: 11,
		NonExistential: 12,
		NullCoalescing: 13,
		Subtraction: 14
	};
	var BinaryOperatorKind = {
		Addition: 1,
		And: 2,
		Assignment: 3,
		BitwiseAnd: 4,
		BitwiseLeftShift: 5,
		BitwiseOr: 6,
		BitwiseRightShift: 7,
		BitwiseXor: 8,
		Division: 9,
		Equality: 10,
		GreaterThan: 11,
		GreaterThanOrEqual: 12,
		Inequality: 13,
		LessThan: 14,
		LessThanOrEqual: 15,
		Modulo: 16,
		Multiplication: 17,
		NullCoalescing: 18,
		Or: 19,
		Subtraction: 20,
		TypeCasting: 21,
		TypeEquality: 22,
		TypeInequality: 23
	};
	var ModifierKind = {
		Abstract: 1,
		Async: 2,
		Private: 3,
		Protected: 4,
		Public: 5,
		Rest: 6,
		Sealed: 7,
		SetterAlias: 8,
		Static: 9,
		ThisAlias: 10
	};
	var NodeKind = {
		AccessorDeclaration: 1,
		ArrayBinding: 2,
		ArrayComprehension: 3,
		ArrayExpression: 4,
		ArrayRange: 5,
		AttributeDeclaration: 6,
		AttributeExpression: 7,
		AttributeOperation: 8,
		AwaitExpression: 9,
		BinaryExpression: 10,
		BindingElement: 11,
		Block: 12,
		BreakStatement: 13,
		CallExpression: 14,
		CallMacroExpression: 15,
		CatchClause: 16,
		ClassDeclaration: 17,
		ClassName: 18,
		CommentBlock: 19,
		CommentLine: 20,
		ConditionalExpression: 21,
		ContinueStatement: 22,
		CreateExpression: 23,
		CurryExpression: 24,
		DestroyStatement: 25,
		DoUntilStatement: 26,
		DoWhileStatement: 27,
		EnumDeclaration: 28,
		EnumExpression: 29,
		EnumMember: 30,
		ExportAlias: 31,
		ExportDeclaration: 32,
		ExternDeclaration: 33,
		ExternOrRequireDeclaration: 34,
		FieldDeclaration: 35,
		ForFromStatement: 36,
		ForInStatement: 37,
		ForOfStatement: 38,
		ForRangeStatement: 39,
		FunctionDeclaration: 40,
		FunctionExpression: 41,
		Identifier: 42,
		IfExpression: 43,
		IfStatement: 44,
		ImplementDeclaration: 45,
		ImportArguments: 46,
		ImportDeclaration: 47,
		ImportDeclarator: 48,
		ImportNamespaceSpecifier: 49,
		ImportReference: 50,
		ImportSpecifier: 51,
		IncludeDeclaration: 52,
		IncludeOnceDeclaration: 53,
		LambdaExpression: 54,
		Literal: 55,
		MacroDeclaration: 56,
		MacroExpression: 57,
		MacroParameter: 58,
		MacroRule: 59,
		MacroVariable: 60,
		MemberExpression: 61,
		MethodDeclaration: 62,
		MixinDeclaration: 63,
		Module: 64,
		MutatorDeclaration: 65,
		NamedArgument: 66,
		NamespaceDeclaration: 67,
		NumericExpression: 68,
		ObjectBinding: 69,
		ObjectExpression: 70,
		ObjectMember: 71,
		OmittedExpression: 72,
		Parameter: 73,
		PolyadicExpression: 74,
		PropertyDeclaration: 75,
		RegularExpression: 76,
		RequireDeclaration: 77,
		RequireOrExternDeclaration: 78,
		RequireOrImportDeclaration: 79,
		ReturnStatement: 80,
		SequenceExpression: 81,
		SurrogateDeclaration: 82,
		SwitchClause: 83,
		SwitchConditionArray: 84,
		SwitchConditionEnum: 85,
		SwitchConditionObject: 86,
		SwitchConditionRange: 87,
		SwitchConditionType: 88,
		SwitchExpression: 89,
		SwitchStatement: 90,
		SwitchTypeCasting: 91,
		TemplateExpression: 92,
		ThisExpression: 93,
		ThrowStatement: 94,
		TraitDeclaration: 95,
		TryStatement: 96,
		TypeAliasDeclaration: 97,
		TypeReference: 98,
		UnaryExpression: 99,
		UnlessExpression: 100,
		UnlessStatement: 101,
		UntilStatement: 102,
		UnionType: 103,
		VariableDeclaration: 104,
		VariableDeclarator: 105,
		WhileStatement: 106
	};
	var ReificationKind = {
		Arguments: 1,
		Block: 2,
		Expression: 3,
		Identifier: 4
	};
	var ScopeKind = {
		Argument: 1,
		Null: 2,
		This: 3
	};
	var UnaryOperatorKind = {
		BitwiseNot: 1,
		DecrementPostfix: 2,
		DecrementPrefix: 3,
		Existential: 4,
		IncrementPostfix: 5,
		IncrementPrefix: 6,
		Negation: 7,
		Negative: 8,
		Spread: 9
	};
	return {
		AssignmentOperatorKind: AssignmentOperatorKind,
		BinaryOperatorKind: BinaryOperatorKind,
		ModifierKind: ModifierKind,
		NodeKind: NodeKind,
		ReificationKind: ReificationKind,
		ScopeKind: ScopeKind,
		UnaryOperatorKind: UnaryOperatorKind
	};
}