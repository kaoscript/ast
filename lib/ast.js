// Generated by kaoscript 0.10.0
const {Helper} = require("@kaoscript/runtime");
module.exports = function() {
	var AssignmentOperatorKind = Helper.enum(Number, {
		Addition: 1,
		And: 2,
		Division: 3,
		Empty: 4,
		EmptyCoalescing: 5,
		Equals: 6,
		Existential: 7,
		LeftShift: 8,
		Modulo: 9,
		Multiplication: 10,
		NonEmpty: 11,
		NonExistential: 12,
		NullCoalescing: 13,
		Or: 14,
		Quotient: 15,
		Return: 16,
		RightShift: 17,
		Subtraction: 18,
		Xor: 19
	});
	var BinaryOperatorKind = Helper.enum(Number, {
		Addition: 1,
		And: 2,
		Assignment: 3,
		Division: 4,
		EmptyCoalescing: 5,
		Equality: 6,
		GreaterThan: 7,
		GreaterThanOrEqual: 8,
		Imply: 9,
		Inequality: 10,
		LeftShift: 11,
		LessThan: 12,
		LessThanOrEqual: 13,
		Match: 14,
		Mismatch: 15,
		Modulo: 16,
		Multiplication: 17,
		NullCoalescing: 18,
		Or: 19,
		Quotient: 20,
		RightShift: 21,
		Subtraction: 22,
		TypeCasting: 23,
		TypeEquality: 24,
		TypeInequality: 25,
		Xor: 26
	});
	var MacroElementKind = Helper.enum(Number, {
		Expression: 1,
		Literal: 2,
		NewLine: 3
	});
	var ModifierKind = Helper.enum(Number, {
		Abstract: 1,
		Alias: 2,
		Ascending: 3,
		Async: 4,
		AutoEvaluate: 5,
		Autofill: 6,
		Ballpark: 7,
		Computed: 8,
		Declarative: 9,
		Default: 10,
		Descending: 11,
		Disabled: 12,
		Dynamic: 13,
		Exclusion: 14,
		Forced: 15,
		Immutable: 16,
		Internal: 17,
		LateInit: 18,
		LazyInit: 19,
		MultiLine: 20,
		Mutable: 21,
		Named: 22,
		NameOnly: 23,
		NonNullable: 24,
		Nullable: 25,
		Ordinal: 26,
		Override: 27,
		Overwrite: 28,
		PositionOnly: 29,
		Private: 30,
		Protected: 31,
		Public: 32,
		Required: 33,
		Rest: 34,
		Sealed: 35,
		Static: 36,
		System: 37,
		ThisAlias: 38,
		Wildcard: 39
	});
	var NodeKind = Helper.enum(Number, {
		AccessorDeclaration: 1,
		Argument: 2,
		ArrayBinding: 3,
		ArrayComprehension: 4,
		ArrayExpression: 5,
		ArrayRange: 6,
		ArrayType: 7,
		AttributeDeclaration: 8,
		AttributeExpression: 9,
		AttributeOperation: 10,
		AwaitExpression: 11,
		BinaryExpression: 12,
		BindingElement: 13,
		BitmaskDeclaration: 14,
		Block: 15,
		BlockStatement: 16,
		BreakStatement: 17,
		CallExpression: 18,
		CascadeExpression: 19,
		CatchClause: 20,
		ClassDeclaration: 21,
		ClassName: 22,
		CommentBlock: 23,
		CommentLine: 24,
		ComparisonExpression: 25,
		ComputedPropertyName: 26,
		ConditionalExpression: 27,
		ContinueStatement: 28,
		CreateExpression: 29,
		CurryExpression: 30,
		DeclarationSpecifier: 31,
		DiscloseDeclaration: 32,
		DisruptiveExpression: 33,
		DoUntilStatement: 34,
		DoWhileStatement: 35,
		DropStatement: 36,
		EnumDeclaration: 37,
		ExclusionType: 38,
		ExportDeclaration: 39,
		ExternDeclaration: 40,
		ExternOrImportDeclaration: 41,
		ExternOrRequireDeclaration: 42,
		ExpressionStatement: 43,
		FallthroughStatement: 44,
		FieldDeclaration: 45,
		ForFromStatement: 46,
		ForInStatement: 47,
		ForOfStatement: 48,
		ForRangeStatement: 49,
		FunctionDeclaration: 50,
		FunctionExpression: 51,
		FusionType: 52,
		GroupSpecifier: 53,
		Identifier: 54,
		IfExpression: 55,
		IfStatement: 56,
		ImplementDeclaration: 57,
		ImportDeclaration: 58,
		ImportDeclarator: 59,
		IncludeAgainDeclaration: 60,
		IncludeDeclaration: 61,
		IncludeDeclarator: 62,
		JunctionExpression: 63,
		LambdaExpression: 64,
		Literal: 65,
		MacroDeclaration: 66,
		MacroExpression: 67,
		MatchClause: 68,
		MatchConditionArray: 69,
		MatchConditionObject: 70,
		MatchConditionRange: 71,
		MatchConditionType: 72,
		MatchExpression: 73,
		MatchStatement: 74,
		MemberExpression: 75,
		MethodDeclaration: 76,
		MixinDeclaration: 77,
		Module: 78,
		MutatorDeclaration: 79,
		NamedArgument: 80,
		NamedSpecifier: 81,
		NamespaceDeclaration: 82,
		NumericExpression: 83,
		ObjectBinding: 84,
		ObjectExpression: 85,
		ObjectMember: 86,
		ObjectType: 87,
		OmittedExpression: 88,
		Parameter: 89,
		PassStatement: 90,
		PickStatement: 91,
		PlaceholderArgument: 92,
		PolyadicExpression: 93,
		PositionalArgument: 94,
		PropertiesSpecifier: 95,
		PropertyDeclaration: 96,
		PropertyType: 97,
		ProxyDeclaration: 98,
		ProxyGroupDeclaration: 99,
		Reference: 100,
		RegularExpression: 101,
		RepeatStatement: 102,
		RequireDeclaration: 103,
		RequireOrExternDeclaration: 104,
		RequireOrImportDeclaration: 105,
		RestrictiveExpression: 106,
		ReturnStatement: 107,
		SequenceExpression: 108,
		ShebangDeclaration: 109,
		ShorthandProperty: 110,
		StructDeclaration: 111,
		StructField: 112,
		SurrogateDeclaration: 113,
		TaggedTemplateExpression: 114,
		TemplateExpression: 115,
		ThisExpression: 116,
		ThrowStatement: 117,
		TraitDeclaration: 118,
		TryExpression: 119,
		TryStatement: 120,
		TupleDeclaration: 121,
		TupleField: 122,
		TypeAliasDeclaration: 123,
		TypeList: 124,
		TypeReference: 125,
		TypedSpecifier: 126,
		UnaryExpression: 127,
		UnlessStatement: 128,
		UntilStatement: 129,
		UnionType: 130,
		VariableDeclaration: 131,
		VariableDeclarator: 132,
		VariableStatement: 133,
		WhileStatement: 134,
		WithStatement: 135
	});
	var ReificationKind = Helper.enum(Number, {
		Argument: 1,
		Expression: 2,
		Join: 3,
		Statement: 4,
		Write: 5
	});
	var RestrictiveOperatorKind = Helper.enum(Number, {
		If: 0,
		Unless: 1
	});
	var ScopeKind = Helper.enum(Number, {
		Argument: 1,
		This: 2
	});
	var UnaryOperatorKind = Helper.enum(Number, {
		Existential: 1,
		ForcedTypeCasting: 2,
		Implicit: 3,
		Negation: 4,
		Negative: 5,
		NonEmpty: 6,
		NullableTypeCasting: 7,
		Spread: 8
	});
	return {
		AssignmentOperatorKind,
		BinaryOperatorKind,
		MacroElementKind,
		ModifierKind,
		NodeKind,
		ReificationKind,
		RestrictiveOperatorKind,
		ScopeKind,
		UnaryOperatorKind
	};
};