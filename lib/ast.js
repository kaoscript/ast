// Generated by kaoscript 0.9.1
var Helper = require("@kaoscript/runtime").Helper;
module.exports = function() {
	var AssignmentOperatorKind = Helper.enum(Number, {
		Addition: 1,
		BitwiseAnd: 2,
		BitwiseLeftShift: 3,
		BitwiseOr: 4,
		BitwiseRightShift: 5,
		BitwiseXor: 6,
		Division: 7,
		Equality: 8,
		Existential: 9,
		Modulo: 10,
		Multiplication: 11,
		NonExistential: 12,
		NullCoalescing: 13,
		Quotient: 14,
		Subtraction: 15
	});
	var BinaryOperatorKind = Helper.enum(Number, {
		Addition: 1,
		And: 2,
		Assignment: 3,
		BitwiseAnd: 4,
		BitwiseLeftShift: 5,
		BitwiseOr: 6,
		BitwiseRightShift: 7,
		BitwiseXor: 8,
		Division: 9,
		Equality: 10,
		GreaterThan: 11,
		GreaterThanOrEqual: 12,
		Imply: 13,
		Inequality: 14,
		LessThan: 15,
		LessThanOrEqual: 16,
		Modulo: 17,
		Multiplication: 18,
		NullCoalescing: 19,
		Or: 20,
		Quotient: 21,
		Subtraction: 22,
		TypeCasting: 23,
		TypeEquality: 24,
		TypeInequality: 25,
		Xor: 26
	});
	var MacroElementKind = Helper.enum(Number, {
		Expression: 1,
		Literal: 2,
		NewLine: 3
	});
	var ModifierKind = Helper.enum(Number, {
		Abstract: 1,
		Array: 2,
		Async: 3,
		AutoEvaluate: 4,
		Autofill: 5,
		AutoTyping: 6,
		Computed: 7,
		Declarative: 8,
		Descending: 9,
		Disabled: 10,
		Final: 11,
		Immutable: 12,
		Internal: 13,
		Named: 14,
		Nullable: 15,
		Object: 16,
		Override: 17,
		Overwrite: 18,
		Private: 19,
		Protected: 20,
		Public: 21,
		Required: 22,
		Rest: 23,
		Sealed: 24,
		SetterAlias: 25,
		Static: 26,
		ThisAlias: 27
	});
	var NodeKind = Helper.enum(Number, {
		AccessorDeclaration: 1,
		ArrayBinding: 2,
		ArrayComprehension: 3,
		ArrayExpression: 4,
		ArrayRange: 5,
		AttributeDeclaration: 6,
		AttributeExpression: 7,
		AttributeOperation: 8,
		AwaitExpression: 9,
		BinaryExpression: 10,
		BindingElement: 11,
		Block: 12,
		BreakStatement: 13,
		CallExpression: 14,
		CallMacroExpression: 15,
		CatchClause: 16,
		ClassDeclaration: 17,
		ClassName: 18,
		CommentBlock: 19,
		CommentLine: 20,
		ComparisonExpression: 21,
		ComputedPropertyName: 22,
		ConditionalExpression: 23,
		ContinueStatement: 24,
		CreateExpression: 25,
		CurryExpression: 26,
		DestroyStatement: 27,
		DiscloseDeclaration: 28,
		DoUntilStatement: 29,
		DoWhileStatement: 30,
		EnumDeclaration: 31,
		EnumExpression: 32,
		EnumMember: 33,
		ExclusionType: 34,
		ExportDeclaration: 35,
		ExportDeclarationSpecifier: 36,
		ExportExclusionSpecifier: 37,
		ExportNamedSpecifier: 38,
		ExportPropertiesSpecifier: 39,
		ExportWildcardSpecifier: 40,
		ExternDeclaration: 41,
		ExternOrRequireDeclaration: 42,
		FallthroughStatement: 43,
		FieldDeclaration: 44,
		ForFromStatement: 45,
		ForInStatement: 46,
		ForOfStatement: 47,
		ForRangeStatement: 48,
		FunctionDeclaration: 49,
		FunctionExpression: 50,
		FusionType: 51,
		Identifier: 52,
		IfExpression: 53,
		IfStatement: 54,
		ImplementDeclaration: 55,
		ImportArgument: 56,
		ImportDeclaration: 57,
		ImportDeclarator: 58,
		ImportExclusionSpecifier: 59,
		ImportNamespaceSpecifier: 60,
		ImportReference: 61,
		ImportSpecifier: 62,
		IncludeAgainDeclaration: 63,
		IncludeDeclaration: 64,
		LambdaExpression: 65,
		Literal: 66,
		MacroDeclaration: 67,
		MacroExpression: 68,
		MemberExpression: 69,
		MethodDeclaration: 70,
		MixinDeclaration: 71,
		Module: 72,
		MutatorDeclaration: 73,
		NamedArgument: 74,
		NamespaceDeclaration: 75,
		NumericExpression: 76,
		ObjectBinding: 77,
		ObjectExpression: 78,
		ObjectMember: 79,
		OmittedExpression: 80,
		Parameter: 81,
		PolyadicExpression: 82,
		PropertyDeclaration: 83,
		RegularExpression: 84,
		RequireDeclaration: 85,
		RequireOrExternDeclaration: 86,
		RequireOrImportDeclaration: 87,
		ReturnStatement: 88,
		SequenceExpression: 89,
		ShorthandProperty: 90,
		StructDeclaration: 91,
		StructField: 92,
		SurrogateDeclaration: 93,
		SwitchClause: 94,
		SwitchConditionArray: 95,
		SwitchConditionEnum: 96,
		SwitchConditionObject: 97,
		SwitchConditionRange: 98,
		SwitchConditionType: 99,
		SwitchExpression: 100,
		SwitchStatement: 101,
		SwitchTypeCasting: 102,
		TaggedTemplateExpression: 103,
		TemplateExpression: 104,
		ThisExpression: 105,
		ThrowStatement: 106,
		TraitDeclaration: 107,
		TryExpression: 108,
		TryStatement: 109,
		TypeAliasDeclaration: 110,
		TypeReference: 111,
		UnaryExpression: 112,
		UnlessExpression: 113,
		UnlessStatement: 114,
		UntilStatement: 115,
		UnionType: 116,
		VariableDeclaration: 117,
		VariableDeclarator: 118,
		WhileStatement: 119
	});
	var ReificationKind = Helper.enum(Number, {
		Argument: 1,
		Expression: 2,
		Join: 3,
		Statement: 4,
		Write: 5
	});
	var ScopeKind = Helper.enum(Number, {
		Argument: 1,
		Null: 2,
		This: 3
	});
	var UnaryOperatorKind = Helper.enum(Number, {
		BitwiseNot: 1,
		DecrementPostfix: 2,
		DecrementPrefix: 3,
		Existential: 4,
		ForcedTypeCasting: 5,
		IncrementPostfix: 6,
		IncrementPrefix: 7,
		Negation: 8,
		Negative: 9,
		NullableTypeCasting: 10,
		Spread: 11
	});
	return {
		AssignmentOperatorKind: AssignmentOperatorKind,
		BinaryOperatorKind: BinaryOperatorKind,
		MacroElementKind: MacroElementKind,
		ModifierKind: ModifierKind,
		NodeKind: NodeKind,
		ReificationKind: ReificationKind,
		ScopeKind: ScopeKind,
		UnaryOperatorKind: UnaryOperatorKind
	};
};