// Generated by kaoscript 0.10.0
const {Helper} = require("@kaoscript/runtime");
module.exports = function() {
	var AssignmentOperatorKind = Helper.enum(Number, {
		Addition: 1,
		And: 2,
		Division: 3,
		Empty: 4,
		EmptyCoalescing: 5,
		Equals: 6,
		Existential: 7,
		LeftShift: 8,
		Modulo: 9,
		Multiplication: 10,
		NonEmpty: 11,
		NonExistential: 12,
		NullCoalescing: 13,
		Or: 14,
		Quotient: 15,
		Return: 16,
		RightShift: 17,
		Subtraction: 18,
		Xor: 19
	});
	var BinaryOperatorKind = Helper.enum(Number, {
		Addition: 1,
		And: 2,
		Assignment: 3,
		BackwardPipeline: 4,
		Division: 5,
		EmptyCoalescing: 6,
		Equality: 7,
		ForwardPipeline: 8,
		GreaterThan: 9,
		GreaterThanOrEqual: 10,
		Imply: 11,
		Inequality: 12,
		LeftShift: 13,
		LessThan: 14,
		LessThanOrEqual: 15,
		Match: 16,
		Mismatch: 17,
		Modulo: 18,
		Multiplication: 19,
		NullCoalescing: 20,
		Or: 21,
		Quotient: 22,
		RightShift: 23,
		Subtraction: 24,
		TypeCasting: 25,
		TypeEquality: 26,
		TypeInequality: 27,
		Xor: 28
	});
	var IterationKind = Helper.enum(Number, {
		Array: 0,
		From: 1,
		Object: 2,
		Range: 3
	});
	var MacroElementKind = Helper.enum(Number, {
		Expression: 1,
		Literal: 2,
		NewLine: 3
	});
	var ModifierKind = Helper.enum(Number, {
		Abstract: 1,
		Alias: 2,
		Ascending: 3,
		Async: 4,
		AutoEvaluate: 5,
		Autofill: 6,
		AutoType: 7,
		Ballpark: 8,
		Computed: 9,
		Constant: 10,
		Declarative: 11,
		Default: 12,
		Descending: 13,
		Disabled: 14,
		Dynamic: 15,
		Exclusion: 16,
		Existential: 17,
		Final: 18,
		Forced: 19,
		Internal: 20,
		LateInit: 21,
		LazyInit: 22,
		MultiLine: 23,
		Mutable: 24,
		Named: 25,
		NameOnly: 26,
		NonEmpty: 27,
		NonNullable: 28,
		Nullable: 29,
		Ordinal: 30,
		Override: 31,
		Overwrite: 32,
		PositionOnly: 33,
		Private: 34,
		Protected: 35,
		Public: 36,
		Required: 37,
		Rest: 38,
		Sealed: 39,
		Spread: 40,
		Static: 41,
		System: 42,
		ThisAlias: 43,
		Wildcard: 44
	});
	var NodeKind = Helper.enum(Number, {
		AccessorDeclaration: 1,
		Argument: 2,
		ArrayBinding: 3,
		ArrayComprehension: 4,
		ArrayExpression: 5,
		ArrayRange: 6,
		ArrayType: 7,
		AttributeDeclaration: 8,
		AttributeExpression: 9,
		AttributeOperation: 10,
		AwaitExpression: 11,
		BinaryExpression: 12,
		BindingElement: 13,
		BitmaskDeclaration: 14,
		Block: 15,
		BlockStatement: 16,
		BreakStatement: 17,
		CallExpression: 18,
		CatchClause: 19,
		ClassDeclaration: 20,
		ClassName: 21,
		CommentBlock: 22,
		CommentLine: 23,
		ComparisonExpression: 24,
		ComputedPropertyName: 25,
		ConditionalExpression: 26,
		ContinueStatement: 27,
		CurryExpression: 28,
		DeclarationSpecifier: 29,
		DiscloseDeclaration: 30,
		DisruptiveExpression: 31,
		DoUntilStatement: 32,
		DoWhileStatement: 33,
		EnumDeclaration: 34,
		ExclusionType: 35,
		ExportDeclaration: 36,
		ExternDeclaration: 37,
		ExternOrImportDeclaration: 38,
		ExternOrRequireDeclaration: 39,
		ExpressionStatement: 40,
		FallthroughStatement: 41,
		FieldDeclaration: 42,
		ForStatement: 43,
		FunctionDeclaration: 44,
		FunctionExpression: 45,
		FusionType: 46,
		GroupSpecifier: 47,
		Identifier: 48,
		IfExpression: 49,
		IfStatement: 50,
		ImplementDeclaration: 51,
		ImportDeclaration: 52,
		ImportDeclarator: 53,
		IncludeAgainDeclaration: 54,
		IncludeDeclaration: 55,
		IncludeDeclarator: 56,
		JunctionExpression: 57,
		LambdaExpression: 58,
		Literal: 59,
		MacroDeclaration: 60,
		MacroExpression: 61,
		MatchClause: 62,
		MatchConditionArray: 63,
		MatchConditionObject: 64,
		MatchConditionRange: 65,
		MatchConditionType: 66,
		MatchExpression: 67,
		MatchStatement: 68,
		MemberExpression: 69,
		MethodDeclaration: 70,
		MixinDeclaration: 71,
		Module: 72,
		MutatorDeclaration: 73,
		NamedArgument: 74,
		NamedSpecifier: 75,
		NamespaceDeclaration: 76,
		NumericExpression: 77,
		ObjectBinding: 78,
		ObjectExpression: 79,
		ObjectMember: 80,
		ObjectType: 81,
		OmittedExpression: 82,
		Parameter: 83,
		PassStatement: 84,
		PlaceholderArgument: 85,
		PolyadicExpression: 86,
		PositionalArgument: 87,
		PropertiesSpecifier: 88,
		PropertyDeclaration: 89,
		PropertyType: 90,
		ProxyDeclaration: 91,
		ProxyGroupDeclaration: 92,
		Reference: 93,
		RegularExpression: 94,
		RepeatStatement: 95,
		RequireDeclaration: 96,
		RequireOrExternDeclaration: 97,
		RequireOrImportDeclaration: 98,
		RestrictiveExpression: 99,
		ReturnStatement: 100,
		RollingExpression: 101,
		SequenceExpression: 102,
		SetStatement: 103,
		ShebangDeclaration: 104,
		ShorthandProperty: 105,
		StructDeclaration: 106,
		StructField: 107,
		SurrogateDeclaration: 108,
		TaggedTemplateExpression: 109,
		TemplateExpression: 110,
		ThisExpression: 111,
		ThrowStatement: 112,
		TopicReference: 113,
		TraitDeclaration: 114,
		TryExpression: 115,
		TryStatement: 116,
		TupleDeclaration: 117,
		TupleField: 118,
		TypeAliasDeclaration: 119,
		TypeList: 120,
		TypeReference: 121,
		TypedSpecifier: 122,
		UnaryExpression: 123,
		UnaryTypeExpression: 124,
		UnlessStatement: 125,
		UntilStatement: 126,
		UnionType: 127,
		VariableDeclaration: 128,
		VariableDeclarator: 129,
		VariableStatement: 130,
		WhileStatement: 131,
		WithStatement: 132
	});
	var ReificationKind = Helper.enum(Number, {
		Argument: 1,
		Expression: 2,
		Join: 3,
		Statement: 4,
		Write: 5
	});
	var RestrictiveOperatorKind = Helper.enum(Number, {
		If: 0,
		Unless: 1
	});
	var ScopeKind = Helper.enum(Number, {
		Argument: 1,
		This: 2
	});
	var UnaryOperatorKind = Helper.enum(Number, {
		Constant: 1,
		Default: 2,
		Existential: 3,
		ForcedTypeCasting: 4,
		Implicit: 5,
		Negation: 6,
		Negative: 7,
		NonEmpty: 8,
		NullableTypeCasting: 9,
		Spread: 10
	});
	var UnaryTypeOperatorKind = Helper.enum(Number, {
		Constant: 1,
		Mutable: 2,
		NewInstance: 3,
		TypeOf: 4,
		ValueOf: 5
	});
	return {
		AssignmentOperatorKind,
		BinaryOperatorKind,
		IterationKind,
		MacroElementKind,
		ModifierKind,
		NodeKind,
		ReificationKind,
		RestrictiveOperatorKind,
		ScopeKind,
		UnaryOperatorKind,
		UnaryTypeOperatorKind
	};
};