// Generated by kaoscript 0.11.0
const {Helper} = require("@kaoscript/runtime");
module.exports = function() {
	var AssignmentOperatorKind = Helper.enum(Number, {
		Addition: 1,
		BitwiseAnd: 2,
		BitwiseOr: 3,
		BitwiseXor: 4,
		BitwiseLeftShift: 5,
		BitwiseRightShift: 6,
		Division: 7,
		Empty: 8,
		EmptyCoalescing: 9,
		Equals: 10,
		Existential: 11,
		LogicalAnd: 12,
		LogicalOr: 13,
		LogicalXor: 14,
		Modulo: 15,
		Multiplication: 16,
		NonEmpty: 17,
		NonExistential: 18,
		NullCoalescing: 19,
		Quotient: 20,
		Return: 21,
		Subtraction: 22
	});
	var BinaryOperatorKind = Helper.enum(Number, {
		Addition: 1,
		Assignment: 2,
		BackwardPipeline: 3,
		BitwiseAnd: 4,
		BitwiseOr: 5,
		BitwiseXor: 6,
		BitwiseLeftShift: 7,
		BitwiseRightShift: 8,
		Division: 9,
		EmptyCoalescing: 10,
		Equality: 11,
		ForwardPipeline: 12,
		GreaterThan: 13,
		GreaterThanOrEqual: 14,
		Inequality: 15,
		JunctionAnd: 16,
		JunctionOr: 17,
		JunctionXor: 18,
		LessThan: 19,
		LessThanOrEqual: 20,
		LogicalAnd: 21,
		LogicalImply: 22,
		LogicalOr: 23,
		LogicalXor: 24,
		Match: 25,
		Mismatch: 26,
		Modulo: 27,
		Multiplication: 28,
		NullCoalescing: 29,
		Quotient: 30,
		Subtraction: 31,
		TypeCasting: 32,
		TypeEquality: 33,
		TypeInequality: 34
	});
	var IterationKind = Helper.enum(Number, {
		Array: 0,
		From: 1,
		Object: 2,
		Range: 3
	});
	var MacroElementKind = Helper.enum(Number, {
		Expression: 1,
		Literal: 2,
		NewLine: 3
	});
	var ModifierKind = Helper.enum(Number, {
		Abstract: 1,
		Alias: 2,
		Ascending: 3,
		Async: 4,
		Assist: 5,
		AutoEvaluate: 6,
		Autofill: 7,
		AutoType: 8,
		Ballpark: 9,
		Computed: 10,
		Constant: 11,
		Declarative: 12,
		Default: 13,
		Descending: 14,
		Disabled: 15,
		Dynamic: 16,
		Exclusion: 17,
		Existential: 18,
		Final: 19,
		Forced: 20,
		Internal: 21,
		LateInit: 22,
		LazyInit: 23,
		MultiLine: 24,
		Mutable: 25,
		Named: 26,
		NameOnly: 27,
		NonEmpty: 28,
		NonNullable: 29,
		Nullable: 30,
		Ordinal: 31,
		Override: 32,
		Overwrite: 33,
		PositionOnly: 34,
		Private: 35,
		Protected: 36,
		Public: 37,
		Required: 38,
		Rest: 39,
		Sealed: 40,
		Spread: 41,
		Static: 42,
		System: 43,
		ThisAlias: 44,
		Wildcard: 45
	});
	var NodeKind = Helper.enum(Number, {
		AccessorDeclaration: 1,
		ArrayBinding: 2,
		ArrayComprehension: 3,
		ArrayExpression: 4,
		ArrayRange: 5,
		ArrayType: 6,
		AttributeDeclaration: 7,
		AttributeExpression: 8,
		AttributeOperation: 9,
		AwaitExpression: 10,
		BinaryExpression: 11,
		BindingElement: 12,
		BitmaskDeclaration: 13,
		Block: 14,
		BlockStatement: 15,
		BreakStatement: 16,
		CallExpression: 17,
		CatchClause: 18,
		ClassDeclaration: 19,
		ClassName: 20,
		CommentBlock: 21,
		CommentLine: 22,
		ComparisonExpression: 23,
		ComputedPropertyName: 24,
		ConditionalExpression: 25,
		ContinueStatement: 26,
		CurryExpression: 27,
		DeclarationSpecifier: 28,
		DiscloseDeclaration: 29,
		DisruptiveExpression: 30,
		DoUntilStatement: 31,
		DoWhileStatement: 32,
		EnumDeclaration: 33,
		EnumValue: 34,
		ExclusionType: 35,
		ExportDeclaration: 36,
		ExternDeclaration: 37,
		ExternOrImportDeclaration: 38,
		ExternOrRequireDeclaration: 39,
		ExpressionStatement: 40,
		FallthroughStatement: 41,
		FieldDeclaration: 42,
		ForStatement: 43,
		FunctionDeclaration: 44,
		FunctionExpression: 45,
		FusionType: 46,
		GroupSpecifier: 47,
		Identifier: 48,
		IfExpression: 49,
		IfStatement: 50,
		ImplementDeclaration: 51,
		ImportDeclaration: 52,
		ImportDeclarator: 53,
		IncludeAgainDeclaration: 54,
		IncludeDeclaration: 55,
		IncludeDeclarator: 56,
		JunctionExpression: 57,
		LambdaExpression: 58,
		Literal: 59,
		MacroDeclaration: 60,
		MacroExpression: 61,
		MatchClause: 62,
		MatchConditionArray: 63,
		MatchConditionObject: 64,
		MatchConditionRange: 65,
		MatchConditionType: 66,
		MatchExpression: 67,
		MatchStatement: 68,
		MemberExpression: 69,
		MethodDeclaration: 70,
		MixinDeclaration: 71,
		Module: 72,
		MutatorDeclaration: 73,
		NamedArgument: 74,
		NamedSpecifier: 75,
		NamespaceDeclaration: 76,
		NumericExpression: 77,
		ObjectBinding: 78,
		ObjectExpression: 79,
		ObjectMember: 80,
		ObjectType: 81,
		OmittedExpression: 82,
		Parameter: 83,
		PassStatement: 84,
		PlaceholderArgument: 85,
		PolyadicExpression: 86,
		PositionalArgument: 87,
		PropertiesSpecifier: 88,
		PropertyDeclaration: 89,
		PropertyType: 90,
		ProxyDeclaration: 91,
		ProxyGroupDeclaration: 92,
		Reference: 93,
		RegularExpression: 94,
		RepeatStatement: 95,
		RequireDeclaration: 96,
		RequireOrExternDeclaration: 97,
		RequireOrImportDeclaration: 98,
		RestrictiveExpression: 99,
		ReturnStatement: 100,
		RollingExpression: 101,
		SequenceExpression: 102,
		SetStatement: 103,
		ShebangDeclaration: 104,
		ShorthandProperty: 105,
		SpreadExpression: 106,
		StatementList: 107,
		StructDeclaration: 108,
		SurrogateDeclaration: 109,
		TaggedTemplateExpression: 110,
		TemplateExpression: 111,
		ThisExpression: 112,
		ThrowStatement: 113,
		TopicReference: 114,
		TraitDeclaration: 115,
		TryExpression: 116,
		TryStatement: 117,
		TupleDeclaration: 118,
		TupleField: 119,
		TypeAliasDeclaration: 120,
		TypeList: 121,
		TypeParameter: 122,
		TypeReference: 123,
		TypedSpecifier: 124,
		UnaryExpression: 125,
		UnaryTypeExpression: 126,
		UnlessStatement: 127,
		UntilStatement: 128,
		UnionType: 129,
		VariableDeclaration: 130,
		VariableDeclarator: 131,
		VariableStatement: 132,
		VariantDeclaration: 133,
		VariantField: 134,
		VariantType: 135,
		WhileStatement: 136,
		WithStatement: 137
	});
	NodeKind.__ks_eq_Argument = value => value === NodeKind.NamedArgument || value === NodeKind.PlaceholderArgument || value === NodeKind.PositionalArgument;
	NodeKind.__ks_eq_ClassMember = value => value === NodeKind.FieldDeclaration || value === NodeKind.MethodDeclaration || value === NodeKind.PropertyDeclaration || value === NodeKind.ProxyDeclaration;
	NodeKind.__ks_eq_Expression = value => value === NodeKind.ArrayBinding || value === NodeKind.ArrayComprehension || value === NodeKind.ArrayExpression || value === NodeKind.ArrayRange || value === NodeKind.AwaitExpression || value === NodeKind.BinaryExpression || value === NodeKind.CallExpression || value === NodeKind.ComparisonExpression || value === NodeKind.ConditionalExpression || value === NodeKind.CurryExpression || value === NodeKind.DisruptiveExpression || value === NodeKind.FunctionExpression || value === NodeKind.Identifier || value === NodeKind.IfExpression || value === NodeKind.JunctionExpression || value === NodeKind.LambdaExpression || value === NodeKind.Literal || value === NodeKind.MacroExpression || value === NodeKind.MatchExpression || value === NodeKind.MemberExpression || value === NodeKind.NamedArgument || value === NodeKind.NumericExpression || value === NodeKind.ObjectBinding || value === NodeKind.ObjectExpression || value === NodeKind.ObjectMember || value === NodeKind.PlaceholderArgument || value === NodeKind.PolyadicExpression || value === NodeKind.PositionalArgument || value === NodeKind.Reference || value === NodeKind.RegularExpression || value === NodeKind.RestrictiveExpression || value === NodeKind.RollingExpression || value === NodeKind.SequenceExpression || value === NodeKind.ShorthandProperty || value === NodeKind.SpreadExpression || value === NodeKind.TaggedTemplateExpression || value === NodeKind.TemplateExpression || value === NodeKind.ThisExpression || value === NodeKind.TopicReference || value === NodeKind.TryExpression || value === NodeKind.UnaryExpression;
	NodeKind.__ks_eq_Statement = value => value === NodeKind.BitmaskDeclaration || value === NodeKind.BlockStatement || value === NodeKind.BreakStatement || value === NodeKind.ClassDeclaration || value === NodeKind.ContinueStatement || value === NodeKind.DoUntilStatement || value === NodeKind.DoWhileStatement || value === NodeKind.EnumDeclaration || value === NodeKind.ExportDeclaration || value === NodeKind.ExternDeclaration || value === NodeKind.ExternOrImportDeclaration || value === NodeKind.ExternOrRequireDeclaration || value === NodeKind.ExpressionStatement || value === NodeKind.FallthroughStatement || value === NodeKind.ForStatement || value === NodeKind.FunctionDeclaration || value === NodeKind.IfStatement || value === NodeKind.ImplementDeclaration || value === NodeKind.ImportDeclaration || value === NodeKind.IncludeAgainDeclaration || value === NodeKind.IncludeDeclaration || value === NodeKind.MacroDeclaration || value === NodeKind.MatchStatement || value === NodeKind.NamespaceDeclaration || value === NodeKind.PassStatement || value === NodeKind.RepeatStatement || value === NodeKind.RequireDeclaration || value === NodeKind.RequireOrExternDeclaration || value === NodeKind.RequireOrImportDeclaration || value === NodeKind.ReturnStatement || value === NodeKind.SetStatement || value === NodeKind.StructDeclaration || value === NodeKind.ThrowStatement || value === NodeKind.TraitDeclaration || value === NodeKind.TryStatement || value === NodeKind.TupleDeclaration || value === NodeKind.UnlessStatement || value === NodeKind.UntilStatement || value === NodeKind.VariableStatement || value === NodeKind.WhileStatement || value === NodeKind.WithStatement;
	NodeKind.__ks_eq_Type = value => value === NodeKind.ArrayType || value === NodeKind.ExclusionType || value === NodeKind.FunctionExpression || value === NodeKind.FusionType || value === NodeKind.ObjectType || value === NodeKind.TypeReference || value === NodeKind.UnaryTypeExpression || value === NodeKind.UnionType || value === NodeKind.VariantType;
	NodeKind.__ks_eq_SpecialDeclaration = value => value === NodeKind.BitmaskDeclaration || value === NodeKind.ClassDeclaration || value === NodeKind.EnumDeclaration || value === NodeKind.FunctionDeclaration || value === NodeKind.MacroDeclaration || value === NodeKind.MacroExpression || value === NodeKind.NamespaceDeclaration || value === NodeKind.StructDeclaration || value === NodeKind.TupleDeclaration || value === NodeKind.TypeAliasDeclaration || value === NodeKind.VariableStatement;
	NodeKind.__ks_eq_DescriptiveType = value => value === NodeKind.BitmaskDeclaration || value === NodeKind.ClassDeclaration || value === NodeKind.EnumDeclaration || value === NodeKind.FunctionDeclaration || value === NodeKind.MacroDeclaration || value === NodeKind.MacroExpression || value === NodeKind.NamespaceDeclaration || value === NodeKind.StructDeclaration || value === NodeKind.TupleDeclaration || value === NodeKind.TypeAliasDeclaration || value === NodeKind.VariableStatement || value === NodeKind.ExportDeclaration || value === NodeKind.VariableDeclarator;
	var ReificationKind = Helper.enum(Number, {
		Argument: 1,
		Expression: 2,
		Join: 3,
		Statement: 4,
		Write: 5
	});
	var RestrictiveOperatorKind = Helper.enum(Number, {
		If: 0,
		Unless: 1
	});
	var ScopeKind = Helper.enum(Number, {
		Argument: 1,
		This: 2
	});
	var UnaryOperatorKind = Helper.enum(Number, {
		BitwiseNegation: 1,
		Constant: 2,
		Existential: 3,
		Implicit: 4,
		LogicalNegation: 5,
		Negative: 6,
		NonEmpty: 7,
		Spread: 8,
		TypeFitting: 9
	});
	var UnaryTypeOperatorKind = Helper.enum(Number, {
		Constant: 1,
		Mutable: 2,
		NewInstance: 3,
		TypeOf: 4,
		ValueOf: 5
	});
	return {
		AssignmentOperatorKind,
		BinaryOperatorKind,
		IterationKind,
		MacroElementKind,
		ModifierKind,
		NodeKind,
		ReificationKind,
		RestrictiveOperatorKind,
		ScopeKind,
		UnaryOperatorKind,
		UnaryTypeOperatorKind
	};
};