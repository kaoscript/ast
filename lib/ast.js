// Generated by kaoscript 0.10.0
const {Helper} = require("@kaoscript/runtime");
module.exports = function() {
	var AssignmentOperatorKind = Helper.enum(Number, {
		Addition: 1,
		And: 2,
		Division: 3,
		Empty: 4,
		EmptyCoalescing: 5,
		Equals: 6,
		Existential: 7,
		LeftShift: 8,
		Modulo: 9,
		Multiplication: 10,
		NonEmpty: 11,
		NonExistential: 12,
		NullCoalescing: 13,
		Or: 14,
		Quotient: 15,
		Return: 16,
		RightShift: 17,
		Subtraction: 18,
		Xor: 19
	});
	var BinaryOperatorKind = Helper.enum(Number, {
		Addition: 1,
		And: 2,
		Assignment: 3,
		Division: 4,
		EmptyCoalescing: 5,
		Equality: 6,
		GreaterThan: 7,
		GreaterThanOrEqual: 8,
		Imply: 9,
		Inequality: 10,
		LeftShift: 11,
		LessThan: 12,
		LessThanOrEqual: 13,
		Match: 14,
		Mismatch: 15,
		Modulo: 16,
		Multiplication: 17,
		NullCoalescing: 18,
		Or: 19,
		Quotient: 20,
		RightShift: 21,
		Subtraction: 22,
		TypeCasting: 23,
		TypeEquality: 24,
		TypeInequality: 25,
		Xor: 26
	});
	var MacroElementKind = Helper.enum(Number, {
		Expression: 1,
		Literal: 2,
		NewLine: 3
	});
	var ModifierKind = Helper.enum(Number, {
		Abstract: 1,
		Alias: 2,
		Async: 3,
		AutoEvaluate: 4,
		Autofill: 5,
		Computed: 6,
		Declarative: 7,
		Default: 8,
		Descending: 9,
		Disabled: 10,
		Dynamic: 11,
		Exclusion: 12,
		Forced: 13,
		Immutable: 14,
		Internal: 15,
		LateInit: 16,
		LazyInit: 17,
		Mutable: 18,
		Named: 19,
		NameOnly: 20,
		Nullable: 21,
		Override: 22,
		Overwrite: 23,
		PositionOnly: 24,
		Private: 25,
		Protected: 26,
		Public: 27,
		Required: 28,
		Rest: 29,
		Sealed: 30,
		Static: 31,
		System: 32,
		ThisAlias: 33,
		Wildcard: 34
	});
	var NodeKind = Helper.enum(Number, {
		AccessorDeclaration: 1,
		Argument: 2,
		ArrayBinding: 3,
		ArrayComprehension: 4,
		ArrayExpression: 5,
		ArrayRange: 6,
		ArrayType: 7,
		AttributeDeclaration: 8,
		AttributeExpression: 9,
		AttributeOperation: 10,
		AwaitExpression: 11,
		BinaryExpression: 12,
		BindingElement: 13,
		BitmaskDeclaration: 14,
		Block: 15,
		BreakStatement: 16,
		CallExpression: 17,
		CallMacroExpression: 18,
		CatchClause: 19,
		ClassDeclaration: 20,
		ClassName: 21,
		CommentBlock: 22,
		CommentLine: 23,
		ComparisonExpression: 24,
		ComputedPropertyName: 25,
		ConditionalExpression: 26,
		ContinueStatement: 27,
		CreateExpression: 28,
		CurryExpression: 29,
		DeclarationSpecifier: 30,
		DestroyStatement: 31,
		DiscloseDeclaration: 32,
		DoUntilStatement: 33,
		DoWhileStatement: 34,
		EnumDeclaration: 35,
		EnumExpression: 36,
		ExclusionType: 37,
		ExportDeclaration: 38,
		ExternDeclaration: 39,
		ExternOrImportDeclaration: 40,
		ExternOrRequireDeclaration: 41,
		FallthroughStatement: 42,
		FieldDeclaration: 43,
		ForFromStatement: 44,
		ForInStatement: 45,
		ForOfStatement: 46,
		ForRangeStatement: 47,
		FunctionDeclaration: 48,
		FunctionExpression: 49,
		FusionType: 50,
		GroupSpecifier: 51,
		Identifier: 52,
		IfExpression: 53,
		IfStatement: 54,
		ImplementDeclaration: 55,
		ImportDeclaration: 56,
		ImportDeclarator: 57,
		IncludeAgainDeclaration: 58,
		IncludeDeclaration: 59,
		IncludeDeclarator: 60,
		JunctionExpression: 61,
		LambdaExpression: 62,
		Literal: 63,
		MacroDeclaration: 64,
		MacroExpression: 65,
		MemberExpression: 66,
		MethodDeclaration: 67,
		MixinDeclaration: 68,
		Module: 69,
		MutatorDeclaration: 70,
		NamedArgument: 71,
		NamedSpecifier: 72,
		NamespaceDeclaration: 73,
		NumericExpression: 74,
		ObjectBinding: 75,
		ObjectExpression: 76,
		ObjectMember: 77,
		ObjectType: 78,
		OmittedExpression: 79,
		Parameter: 80,
		PassStatement: 81,
		PolyadicExpression: 82,
		PositionalArgument: 83,
		PropertiesSpecifier: 84,
		PropertyDeclaration: 85,
		PropertyType: 86,
		ProxyDeclaration: 87,
		ProxyGroupDeclaration: 88,
		RegularExpression: 89,
		RequireDeclaration: 90,
		RequireOrExternDeclaration: 91,
		RequireOrImportDeclaration: 92,
		ReturnStatement: 93,
		SequenceExpression: 94,
		ShebangDeclaration: 95,
		ShorthandProperty: 96,
		StructDeclaration: 97,
		StructField: 98,
		SurrogateDeclaration: 99,
		SwitchClause: 100,
		SwitchConditionArray: 101,
		SwitchConditionEnum: 102,
		SwitchConditionObject: 103,
		SwitchConditionRange: 104,
		SwitchConditionType: 105,
		SwitchExpression: 106,
		SwitchStatement: 107,
		SwitchTypeCasting: 108,
		TaggedTemplateExpression: 109,
		TemplateExpression: 110,
		ThisExpression: 111,
		ThrowStatement: 112,
		TraitDeclaration: 113,
		TryExpression: 114,
		TryStatement: 115,
		TupleDeclaration: 116,
		TupleField: 117,
		TypeAliasDeclaration: 118,
		TypeList: 119,
		TypeReference: 120,
		TypedSpecifier: 121,
		UnaryExpression: 122,
		UnlessExpression: 123,
		UnlessStatement: 124,
		UntilStatement: 125,
		UnionType: 126,
		VariableDeclaration: 127,
		VariableDeclarator: 128,
		VariableStatement: 129,
		WhileStatement: 130,
		WithStatement: 131
	});
	var ReificationKind = Helper.enum(Number, {
		Argument: 1,
		Expression: 2,
		Join: 3,
		Statement: 4,
		Write: 5
	});
	var ScopeKind = Helper.enum(Number, {
		Argument: 1,
		Null: 2,
		This: 3
	});
	var UnaryOperatorKind = Helper.enum(Number, {
		Existential: 1,
		ForcedTypeCasting: 2,
		Negation: 3,
		Negative: 4,
		NonEmpty: 5,
		NullableTypeCasting: 6,
		Spread: 7
	});
	return {
		AssignmentOperatorKind,
		BinaryOperatorKind,
		MacroElementKind,
		ModifierKind,
		NodeKind,
		ReificationKind,
		ScopeKind,
		UnaryOperatorKind
	};
};