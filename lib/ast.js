// Generated by kaoscript 0.8.0
module.exports = function() {
	var AssignmentOperatorKind = {
		Addition: 1,
		BitwiseAnd: 2,
		BitwiseLeftShift: 3,
		BitwiseOr: 4,
		BitwiseRightShift: 5,
		BitwiseXor: 6,
		Division: 7,
		Equality: 8,
		Existential: 9,
		Modulo: 10,
		Multiplication: 11,
		NonExistential: 12,
		NullCoalescing: 13,
		Subtraction: 14
	};
	var BinaryOperatorKind = {
		Addition: 1,
		And: 2,
		Assignment: 3,
		BitwiseAnd: 4,
		BitwiseLeftShift: 5,
		BitwiseOr: 6,
		BitwiseRightShift: 7,
		BitwiseXor: 8,
		Division: 9,
		Equality: 10,
		GreaterThan: 11,
		GreaterThanOrEqual: 12,
		Inequality: 13,
		LessThan: 14,
		LessThanOrEqual: 15,
		Modulo: 16,
		Multiplication: 17,
		NullCoalescing: 18,
		Or: 19,
		Subtraction: 20,
		TypeCasting: 21,
		TypeEquality: 22,
		TypeInequality: 23
	};
	var ModifierKind = {
		Abstract: 1,
		Alias: 2,
		Async: 3,
		Private: 4,
		Protected: 5,
		Public: 6,
		Rest: 7,
		Sealed: 8,
		Static: 9
	};
	var NodeKind = {
		ArrayBinding: 1,
		ArrayComprehension: 2,
		ArrayExpression: 3,
		ArrayRange: 4,
		AttributeDeclaration: 5,
		AttributeExpression: 6,
		AttributeOperator: 7,
		AwaitExpression: 8,
		BinaryOperator: 9,
		BindingElement: 10,
		Block: 11,
		BreakStatement: 12,
		CallExpression: 13,
		CatchClause: 14,
		ClassDeclaration: 15,
		ClassName: 16,
		CommentBlock: 17,
		CommentLine: 18,
		ConditionalExpression: 19,
		ContinueStatement: 20,
		CreateExpression: 21,
		CurryExpression: 22,
		DestroyStatement: 23,
		DoUntilStatement: 24,
		DoWhileStatement: 25,
		EnumDeclaration: 26,
		EnumExpression: 27,
		EnumMember: 28,
		ExportAlias: 29,
		ExportDeclaration: 30,
		ExternDeclaration: 31,
		ExternOrRequireDeclaration: 32,
		FieldDeclaration: 33,
		ForFromStatement: 34,
		ForInStatement: 35,
		ForOfStatement: 36,
		ForRangeStatement: 37,
		FunctionDeclaration: 38,
		FunctionExpression: 39,
		Identifier: 40,
		IfExpression: 41,
		IfStatement: 42,
		ImplementDeclaration: 43,
		ImportDeclaration: 44,
		ImportDeclarator: 45,
		ImportReference: 46,
		ImportSpecifier: 47,
		ImportWildcardSpecifier: 48,
		IncludeDeclaration: 49,
		IncludeOnceDeclaration: 50,
		LambdaExpression: 51,
		Literal: 52,
		MemberExpression: 53,
		MethodAliasDeclaration: 54,
		MethodDeclaration: 55,
		MethodLinkDeclaration: 56,
		MixinDeclaration: 57,
		Module: 58,
		NumericExpression: 59,
		ObjectBinding: 60,
		ObjectExpression: 61,
		ObjectMember: 62,
		OmittedExpression: 63,
		Parameter: 64,
		PolyadicOperator: 65,
		RegularExpression: 66,
		RequireDeclaration: 67,
		RequireOrExternDeclaration: 68,
		RequireOrImportDeclaration: 69,
		ReturnStatement: 70,
		SequenceExpression: 71,
		SurrogateDeclaration: 72,
		SwitchClause: 73,
		SwitchConditionArray: 74,
		SwitchConditionEnum: 75,
		SwitchConditionObject: 76,
		SwitchConditionRange: 77,
		SwitchConditionType: 78,
		SwitchExpression: 79,
		SwitchStatement: 80,
		SwitchTypeCasting: 81,
		TemplateExpression: 82,
		ThisExpression: 83,
		ThrowStatement: 84,
		TraitDeclaration: 85,
		TryStatement: 86,
		TypeAliasDeclaration: 87,
		TypeReference: 88,
		UnaryExpression: 89,
		UnlessExpression: 90,
		UnlessStatement: 91,
		UntilStatement: 92,
		UnionType: 93,
		VariableDeclaration: 94,
		VariableDeclarator: 95,
		VariableExpression: 96,
		WhileStatement: 97
	};
	var ScopeKind = {
		Argument: 1,
		Null: 2,
		This: 3
	};
	var UnaryOperatorKind = {
		BitwiseNot: 1,
		DecrementPostfix: 2,
		DecrementPrefix: 3,
		Existential: 4,
		IncrementPostfix: 5,
		IncrementPrefix: 6,
		Negation: 7,
		Negative: 8,
		Spread: 9
	};
	return {
		AssignmentOperatorKind: AssignmentOperatorKind,
		BinaryOperatorKind: BinaryOperatorKind,
		ModifierKind: ModifierKind,
		NodeKind: NodeKind,
		ScopeKind: ScopeKind,
		UnaryOperatorKind: UnaryOperatorKind
	};
}