// Generated by kaoscript 0.10.0
const {Helper} = require("@kaoscript/runtime");
module.exports = function() {
	var AssignmentOperatorKind = Helper.enum(Number, {
		Addition: 1,
		BitwiseAnd: 2,
		BitwiseLeftShift: 3,
		BitwiseOr: 4,
		BitwiseRightShift: 5,
		BitwiseXor: 6,
		Division: 7,
		Equality: 8,
		Existential: 9,
		Modulo: 10,
		Multiplication: 11,
		NonExistential: 12,
		NullCoalescing: 13,
		Quotient: 14,
		Subtraction: 15
	});
	var BinaryOperatorKind = Helper.enum(Number, {
		Addition: 1,
		And: 2,
		Assignment: 3,
		BitwiseAnd: 4,
		BitwiseLeftShift: 5,
		BitwiseOr: 6,
		BitwiseRightShift: 7,
		BitwiseXor: 8,
		Division: 9,
		Equality: 10,
		GreaterThan: 11,
		GreaterThanOrEqual: 12,
		Imply: 13,
		Inequality: 14,
		LessThan: 15,
		LessThanOrEqual: 16,
		Match: 17,
		Mismatch: 18,
		Modulo: 19,
		Multiplication: 20,
		NullCoalescing: 21,
		Or: 22,
		Quotient: 23,
		Subtraction: 24,
		TypeCasting: 25,
		TypeEquality: 26,
		TypeInequality: 27,
		Xor: 28
	});
	var MacroElementKind = Helper.enum(Number, {
		Expression: 1,
		Literal: 2,
		NewLine: 3
	});
	var ModifierKind = Helper.enum(Number, {
		Abstract: 1,
		Async: 2,
		AutoEvaluate: 3,
		Autofill: 4,
		Computed: 5,
		Declarative: 6,
		Descending: 7,
		Disabled: 8,
		Dynamic: 9,
		Flagged: 10,
		Forced: 11,
		Immutable: 12,
		Internal: 13,
		LateInit: 14,
		LazyInit: 15,
		Mutable: 16,
		Named: 17,
		Nullable: 18,
		Override: 19,
		Overwrite: 20,
		Private: 21,
		Protected: 22,
		Public: 23,
		Required: 24,
		Rest: 25,
		Sealed: 26,
		SetterAlias: 27,
		Static: 28,
		Systemic: 29,
		ThisAlias: 30
	});
	var NodeKind = Helper.enum(Number, {
		AccessorDeclaration: 1,
		ArrayBinding: 2,
		ArrayComprehension: 3,
		ArrayExpression: 4,
		ArrayRange: 5,
		ArrayType: 6,
		AttributeDeclaration: 7,
		AttributeExpression: 8,
		AttributeOperation: 9,
		AwaitExpression: 10,
		BinaryExpression: 11,
		BindingElement: 12,
		Block: 13,
		BreakStatement: 14,
		CallExpression: 15,
		CallMacroExpression: 16,
		CatchClause: 17,
		ClassDeclaration: 18,
		ClassName: 19,
		CommentBlock: 20,
		CommentLine: 21,
		ComparisonExpression: 22,
		ComputedPropertyName: 23,
		ConditionalExpression: 24,
		ContinueStatement: 25,
		CreateExpression: 26,
		CurryExpression: 27,
		DestroyStatement: 28,
		DiscloseDeclaration: 29,
		DoUntilStatement: 30,
		DoWhileStatement: 31,
		EnumDeclaration: 32,
		EnumExpression: 33,
		ExclusionType: 34,
		ExportDeclaration: 35,
		ExportDeclarationSpecifier: 36,
		ExportExclusionSpecifier: 37,
		ExportNamedSpecifier: 38,
		ExportPropertiesSpecifier: 39,
		ExportWildcardSpecifier: 40,
		ExternDeclaration: 41,
		ExternOrImportDeclaration: 42,
		ExternOrRequireDeclaration: 43,
		FallthroughStatement: 44,
		FieldDeclaration: 45,
		ForFromStatement: 46,
		ForInStatement: 47,
		ForOfStatement: 48,
		ForRangeStatement: 49,
		FunctionDeclaration: 50,
		FunctionExpression: 51,
		FusionType: 52,
		Identifier: 53,
		IfExpression: 54,
		IfStatement: 55,
		ImplementDeclaration: 56,
		ImportArgument: 57,
		ImportDeclaration: 58,
		ImportDeclarator: 59,
		ImportExclusionSpecifier: 60,
		ImportNamespaceSpecifier: 61,
		ImportReference: 62,
		ImportSpecifier: 63,
		IncludeAgainDeclaration: 64,
		IncludeDeclaration: 65,
		IncludeDeclarator: 66,
		JunctionExpression: 67,
		LambdaExpression: 68,
		Literal: 69,
		MacroDeclaration: 70,
		MacroExpression: 71,
		MemberExpression: 72,
		MethodDeclaration: 73,
		MixinDeclaration: 74,
		Module: 75,
		MutatorDeclaration: 76,
		NamedArgument: 77,
		NamespaceDeclaration: 78,
		NumericExpression: 79,
		ObjectBinding: 80,
		ObjectExpression: 81,
		ObjectMember: 82,
		ObjectType: 83,
		OmittedExpression: 84,
		Parameter: 85,
		PolyadicExpression: 86,
		PropertyDeclaration: 87,
		RegularExpression: 88,
		RequireDeclaration: 89,
		RequireOrExternDeclaration: 90,
		RequireOrImportDeclaration: 91,
		ReturnStatement: 92,
		ReturnTypeReference: 93,
		SequenceExpression: 94,
		ShorthandProperty: 95,
		StructDeclaration: 96,
		StructField: 97,
		SurrogateDeclaration: 98,
		SwitchClause: 99,
		SwitchConditionArray: 100,
		SwitchConditionEnum: 101,
		SwitchConditionObject: 102,
		SwitchConditionRange: 103,
		SwitchConditionType: 104,
		SwitchExpression: 105,
		SwitchStatement: 106,
		SwitchTypeCasting: 107,
		TaggedTemplateExpression: 108,
		TemplateExpression: 109,
		ThisExpression: 110,
		ThrowStatement: 111,
		TraitDeclaration: 112,
		TryExpression: 113,
		TryStatement: 114,
		TupleDeclaration: 115,
		TupleField: 116,
		TypeAliasDeclaration: 117,
		TypeReference: 118,
		UnaryExpression: 119,
		UnlessExpression: 120,
		UnlessStatement: 121,
		UntilStatement: 122,
		UnionType: 123,
		VariableDeclaration: 124,
		VariableDeclarator: 125,
		WhileStatement: 126
	});
	var ReificationKind = Helper.enum(Number, {
		Argument: 1,
		Expression: 2,
		Join: 3,
		Statement: 4,
		Write: 5
	});
	var ScopeKind = Helper.enum(Number, {
		Argument: 1,
		Null: 2,
		This: 3
	});
	var UnaryOperatorKind = Helper.enum(Number, {
		BitwiseNot: 1,
		DecrementPostfix: 2,
		DecrementPrefix: 3,
		Existential: 4,
		ForcedTypeCasting: 5,
		IncrementPostfix: 6,
		IncrementPrefix: 7,
		Negation: 8,
		Negative: 9,
		NullableTypeCasting: 10,
		Spread: 11
	});
	return {
		AssignmentOperatorKind,
		BinaryOperatorKind,
		MacroElementKind,
		ModifierKind,
		NodeKind,
		ReificationKind,
		ScopeKind,
		UnaryOperatorKind
	};
};