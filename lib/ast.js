// Generated by kaoscript 0.8.0
module.exports = function() {
	var AssignmentOperatorKind = {
		Addition: 1,
		BitwiseAnd: 2,
		BitwiseLeftShift: 3,
		BitwiseOr: 4,
		BitwiseRightShift: 5,
		BitwiseXor: 6,
		Division: 7,
		Equality: 8,
		Existential: 9,
		Modulo: 10,
		Multiplication: 11,
		NonExistential: 12,
		NullCoalescing: 13,
		Subtraction: 14
	};
	var BinaryOperatorKind = {
		Addition: 1,
		And: 2,
		Assignment: 3,
		BitwiseAnd: 4,
		BitwiseLeftShift: 5,
		BitwiseOr: 6,
		BitwiseRightShift: 7,
		BitwiseXor: 8,
		Division: 9,
		Equality: 10,
		GreaterThan: 11,
		GreaterThanOrEqual: 12,
		Inequality: 13,
		LessThan: 14,
		LessThanOrEqual: 15,
		Modulo: 16,
		Multiplication: 17,
		NullCoalescing: 18,
		Or: 19,
		Subtraction: 20,
		TypeCasting: 21,
		TypeEquality: 22,
		TypeInequality: 23
	};
	var MacroElementKind = {
		Expression: 1,
		Literal: 2,
		NewLine: 3
	};
	var ModifierKind = {
		Abstract: 1,
		Async: 2,
		AutoEvaluate: 3,
		Override: 4,
		Private: 5,
		Protected: 6,
		Public: 7,
		Rest: 8,
		Sealed: 9,
		SetterAlias: 10,
		Static: 11,
		ThisAlias: 12
	};
	var NodeKind = {
		AccessorDeclaration: 1,
		ArrayBinding: 2,
		ArrayComprehension: 3,
		ArrayExpression: 4,
		ArrayRange: 5,
		AttributeDeclaration: 6,
		AttributeExpression: 7,
		AttributeOperation: 8,
		AwaitExpression: 9,
		BinaryExpression: 10,
		BindingElement: 11,
		Block: 12,
		BreakStatement: 13,
		CallExpression: 14,
		CallMacroExpression: 15,
		CatchClause: 16,
		ClassDeclaration: 17,
		ClassName: 18,
		CommentBlock: 19,
		CommentLine: 20,
		ComputedPropertyName: 21,
		ConditionalExpression: 22,
		ContinueStatement: 23,
		CreateExpression: 24,
		CurryExpression: 25,
		DestroyStatement: 26,
		DiscloseDeclaration: 27,
		DoUntilStatement: 28,
		DoWhileStatement: 29,
		EnumDeclaration: 30,
		EnumExpression: 31,
		EnumMember: 32,
		ExportDeclaration: 33,
		ExportDeclarationSpecifier: 34,
		ExportNamedSpecifier: 35,
		ExportPropertiesSpecifier: 36,
		ExportWildcardSpecifier: 37,
		ExternDeclaration: 38,
		ExternOrRequireDeclaration: 39,
		FieldDeclaration: 40,
		ForFromStatement: 41,
		ForInStatement: 42,
		ForOfStatement: 43,
		ForRangeStatement: 44,
		FunctionDeclaration: 45,
		FunctionExpression: 46,
		Identifier: 47,
		IfExpression: 48,
		IfStatement: 49,
		ImplementDeclaration: 50,
		ImportArgument: 51,
		ImportDeclaration: 52,
		ImportDeclarator: 53,
		ImportNamespaceSpecifier: 54,
		ImportReference: 55,
		ImportSpecifier: 56,
		IncludeAgainDeclaration: 57,
		IncludeDeclaration: 58,
		LambdaExpression: 59,
		Literal: 60,
		MacroDeclaration: 61,
		MacroExpression: 62,
		MemberExpression: 63,
		MethodDeclaration: 64,
		MixinDeclaration: 65,
		Module: 66,
		MutatorDeclaration: 67,
		NamespaceDeclaration: 68,
		NumericExpression: 69,
		ObjectBinding: 70,
		ObjectExpression: 71,
		ObjectMember: 72,
		OmittedExpression: 73,
		Parameter: 74,
		PolyadicExpression: 75,
		PropertyDeclaration: 76,
		RegularExpression: 77,
		RequireDeclaration: 78,
		RequireOrExternDeclaration: 79,
		RequireOrImportDeclaration: 80,
		ReturnStatement: 81,
		SequenceExpression: 82,
		ShorthandProperty: 83,
		SurrogateDeclaration: 84,
		SwitchClause: 85,
		SwitchConditionArray: 86,
		SwitchConditionEnum: 87,
		SwitchConditionObject: 88,
		SwitchConditionRange: 89,
		SwitchConditionType: 90,
		SwitchExpression: 91,
		SwitchStatement: 92,
		SwitchTypeCasting: 93,
		TaggedTemplateExpression: 94,
		TemplateExpression: 95,
		ThisExpression: 96,
		ThrowStatement: 97,
		TraitDeclaration: 98,
		TryStatement: 99,
		TypeAliasDeclaration: 100,
		TypeReference: 101,
		UnaryExpression: 102,
		UnlessExpression: 103,
		UnlessStatement: 104,
		UntilStatement: 105,
		UnionType: 106,
		VariableDeclaration: 107,
		VariableDeclarator: 108,
		WhileStatement: 109
	};
	var ReificationKind = {
		Arguments: 1,
		Block: 2,
		Expression: 3,
		Identifier: 4
	};
	var ScopeKind = {
		Argument: 1,
		Null: 2,
		This: 3
	};
	var UnaryOperatorKind = {
		BitwiseNot: 1,
		DecrementPostfix: 2,
		DecrementPrefix: 3,
		Existential: 4,
		IncrementPostfix: 5,
		IncrementPrefix: 6,
		Negation: 7,
		Negative: 8,
		Spread: 9
	};
	return {
		AssignmentOperatorKind: AssignmentOperatorKind,
		BinaryOperatorKind: BinaryOperatorKind,
		MacroElementKind: MacroElementKind,
		ModifierKind: ModifierKind,
		NodeKind: NodeKind,
		ReificationKind: ReificationKind,
		ScopeKind: ScopeKind,
		UnaryOperatorKind: UnaryOperatorKind
	};
}