// Generated by kaoscript 0.4.0
module.exports = function() {
	var AssignmentOperator = {
		Addition: 1,
		BitwiseAnd: 2,
		BitwiseLeftShift: 3,
		BitwiseOr: 4,
		BitwiseRightShift: 5,
		BitwiseXor: 6,
		Division: 7,
		Equality: 8,
		Existential: 9,
		Modulo: 10,
		Multiplication: 11,
		NullCoalescing: 12,
		Subtraction: 13
	};
	var BinaryOperator = {
		Addition: 1,
		And: 2,
		Assignment: 3,
		BitwiseAnd: 4,
		BitwiseLeftShift: 5,
		BitwiseOr: 6,
		BitwiseRightShift: 7,
		BitwiseXor: 8,
		Division: 9,
		Equality: 10,
		GreaterThan: 11,
		GreaterThanOrEqual: 12,
		Inequality: 13,
		LessThan: 14,
		LessThanOrEqual: 15,
		Modulo: 16,
		Multiplication: 17,
		NullCoalescing: 18,
		Or: 19,
		Subtraction: 20,
		TypeCasting: 21,
		TypeEquality: 22,
		TypeInequality: 23
	};
	var FunctionModifier = {
		Async: 1
	};
	var Kind = {
		ArrayBinding: 1,
		ArrayComprehension: 2,
		ArrayExpression: 3,
		ArrayRange: 4,
		AttributeDeclaration: 5,
		AttributeExpression: 6,
		AttributeOperator: 7,
		AwaitExpression: 8,
		BinaryOperator: 9,
		BindingElement: 10,
		Block: 11,
		BreakStatement: 12,
		CallExpression: 13,
		CatchClause: 14,
		ClassDeclaration: 15,
		ClassName: 16,
		CommentBlock: 17,
		CommentLine: 18,
		ContinueStatement: 19,
		CurryExpression: 20,
		DoUntilStatement: 21,
		DoWhileStatement: 22,
		ElseStatement: 23,
		ElseIfStatement: 24,
		EnumDeclaration: 25,
		EnumExpression: 26,
		EnumMember: 27,
		ExportAlias: 28,
		ExportDeclaration: 29,
		ExternDeclaration: 30,
		ExternOrRequireDeclaration: 31,
		FieldDeclaration: 32,
		ForFromStatement: 33,
		ForInStatement: 34,
		ForOfStatement: 35,
		ForRangeStatement: 36,
		FunctionDeclaration: 37,
		FunctionExpression: 38,
		Identifier: 39,
		IfExpression: 40,
		IfStatement: 41,
		ImplementDeclaration: 42,
		ImportDeclaration: 43,
		ImportDeclarator: 44,
		ImportReference: 45,
		ImportSpecifier: 46,
		ImportWildcardSpecifier: 47,
		IncludeDeclaration: 48,
		IncludeOnceDeclaration: 49,
		Literal: 50,
		MemberExpression: 51,
		MemberReference: 52,
		MethodAliasDeclaration: 53,
		MethodDeclaration: 54,
		MethodLinkDeclaration: 55,
		MixinDeclaration: 56,
		Module: 57,
		NumericExpression: 58,
		ObjectBinding: 59,
		ObjectExpression: 60,
		ObjectMember: 61,
		OmittedExpression: 62,
		Parameter: 63,
		PolyadicOperator: 64,
		RegularExpression: 65,
		RequireDeclaration: 66,
		RequireOrExternDeclaration: 67,
		ReturnStatement: 68,
		SurrogateDeclaration: 69,
		SwitchClause: 70,
		SwitchConditionArray: 71,
		SwitchConditionEnum: 72,
		SwitchConditionObject: 73,
		SwitchConditionRange: 74,
		SwitchConditionType: 75,
		SwitchExpression: 76,
		SwitchStatement: 77,
		SwitchTypeCasting: 78,
		TemplateExpression: 79,
		TernaryConditionalExpression: 80,
		ThrowStatement: 81,
		TraitDeclaration: 82,
		TryStatement: 83,
		TypeAliasDeclaration: 84,
		TypeReference: 85,
		UnaryExpression: 86,
		UnlessExpression: 87,
		UnlessStatement: 88,
		UntilStatement: 89,
		UnionType: 90,
		VariableDeclaration: 91,
		VariableDeclarator: 92,
		VariableExpression: 93,
		WhileStatement: 94
	};
	var MemberModifier = {
		Private: 2,
		Protected: 3,
		Public: 4,
		Static: 5
	};
	var ParameterModifier = {
		Member: 1,
		Rest: 2
	};
	var ScopeModifier = {
		Argument: 1,
		Null: 2,
		This: 3
	};
	var UnaryOperator = {
		BitwiseNot: 1,
		DecrementPostfix: 2,
		DecrementPrefix: 3,
		Existential: 4,
		IncrementPostfix: 5,
		IncrementPrefix: 6,
		Negation: 7,
		Negative: 8,
		New: 9,
		Spread: 10
	};
	var VariableModifier = {
		Const: 1,
		Let: 2
	};
	return {
		AssignmentOperator: AssignmentOperator,
		BinaryOperator: BinaryOperator,
		FunctionModifier: FunctionModifier,
		Kind: Kind,
		MemberModifier: MemberModifier,
		ParameterModifier: ParameterModifier,
		ScopeModifier: ScopeModifier,
		UnaryOperator: UnaryOperator,
		VariableModifier: VariableModifier
	};
}