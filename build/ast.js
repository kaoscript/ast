// Generated by kaoscript 0.6.0
module.exports = function() {
	var AssignmentOperator = {
		Addition: 1,
		BitwiseAnd: 2,
		BitwiseLeftShift: 3,
		BitwiseOr: 4,
		BitwiseRightShift: 5,
		BitwiseXor: 6,
		Division: 7,
		Equality: 8,
		Existential: 9,
		Modulo: 10,
		Multiplication: 11,
		NonExistential: 12,
		NullCoalescing: 13,
		Subtraction: 14
	};
	var BinaryOperator = {
		Addition: 1,
		And: 2,
		Assignment: 3,
		BitwiseAnd: 4,
		BitwiseLeftShift: 5,
		BitwiseOr: 6,
		BitwiseRightShift: 7,
		BitwiseXor: 8,
		Division: 9,
		Equality: 10,
		GreaterThan: 11,
		GreaterThanOrEqual: 12,
		Inequality: 13,
		LessThan: 14,
		LessThanOrEqual: 15,
		Modulo: 16,
		Multiplication: 17,
		NullCoalescing: 18,
		Or: 19,
		Subtraction: 20,
		TypeCasting: 21,
		TypeEquality: 22,
		TypeInequality: 23
	};
	var ClassModifier = {
		Abstract: 1,
		Sealed: 2
	};
	var FunctionModifier = {
		Async: 1
	};
	var Kind = {
		ArrayBinding: 1,
		ArrayComprehension: 2,
		ArrayExpression: 3,
		ArrayRange: 4,
		AttributeDeclaration: 5,
		AttributeExpression: 6,
		AttributeOperator: 7,
		AwaitExpression: 8,
		BinaryOperator: 9,
		BindingElement: 10,
		Block: 11,
		BreakStatement: 12,
		CallExpression: 13,
		CatchClause: 14,
		ClassDeclaration: 15,
		ClassName: 16,
		CommentBlock: 17,
		CommentLine: 18,
		ContinueStatement: 19,
		CreateExpression: 20,
		CurryExpression: 21,
		DestroyStatement: 22,
		DoUntilStatement: 23,
		DoWhileStatement: 24,
		ElseStatement: 25,
		ElseIfStatement: 26,
		EnumDeclaration: 27,
		EnumExpression: 28,
		EnumMember: 29,
		ExportAlias: 30,
		ExportDeclaration: 31,
		ExternDeclaration: 32,
		ExternOrRequireDeclaration: 33,
		FieldDeclaration: 34,
		ForFromStatement: 35,
		ForInStatement: 36,
		ForOfStatement: 37,
		ForRangeStatement: 38,
		FunctionDeclaration: 39,
		FunctionExpression: 40,
		Identifier: 41,
		IfExpression: 42,
		IfStatement: 43,
		ImplementDeclaration: 44,
		ImportDeclaration: 45,
		ImportDeclarator: 46,
		ImportReference: 47,
		ImportSpecifier: 48,
		ImportWildcardSpecifier: 49,
		IncludeDeclaration: 50,
		IncludeOnceDeclaration: 51,
		LambdaExpression: 52,
		Literal: 53,
		MemberExpression: 54,
		MethodAliasDeclaration: 55,
		MethodDeclaration: 56,
		MethodLinkDeclaration: 57,
		MixinDeclaration: 58,
		Module: 59,
		NumericExpression: 60,
		ObjectBinding: 61,
		ObjectExpression: 62,
		ObjectMember: 63,
		OmittedExpression: 64,
		Parameter: 65,
		PolyadicOperator: 66,
		RegularExpression: 67,
		RequireDeclaration: 68,
		RequireOrExternDeclaration: 69,
		ReturnStatement: 70,
		SurrogateDeclaration: 71,
		SwitchClause: 72,
		SwitchConditionArray: 73,
		SwitchConditionEnum: 74,
		SwitchConditionObject: 75,
		SwitchConditionRange: 76,
		SwitchConditionType: 77,
		SwitchExpression: 78,
		SwitchStatement: 79,
		SwitchTypeCasting: 80,
		TemplateExpression: 81,
		TernaryConditionalExpression: 82,
		ThisExpression: 83,
		ThrowStatement: 84,
		TraitDeclaration: 85,
		TryStatement: 86,
		TypeAliasDeclaration: 87,
		TypeReference: 88,
		UnaryExpression: 89,
		UnlessExpression: 90,
		UnlessStatement: 91,
		UntilStatement: 92,
		UnionType: 93,
		VariableDeclaration: 94,
		VariableDeclarator: 95,
		VariableExpression: 96,
		WhileStatement: 97
	};
	var MemberModifier = {
		Private: 3,
		Protected: 4,
		Public: 5,
		Static: 6
	};
	var MethodModifier = {
		Abstract: 2
	};
	var ParameterModifier = {
		Member: 1,
		Rest: 2
	};
	var ScopeModifier = {
		Argument: 1,
		Null: 2,
		This: 3
	};
	var UnaryOperator = {
		BitwiseNot: 1,
		DecrementPostfix: 2,
		DecrementPrefix: 3,
		Existential: 4,
		IncrementPostfix: 5,
		IncrementPrefix: 6,
		Negation: 7,
		Negative: 8,
		Spread: 9
	};
	var VariableModifier = {
		Const: 1,
		Let: 2
	};
	return {
		AssignmentOperator: AssignmentOperator,
		BinaryOperator: BinaryOperator,
		ClassModifier: ClassModifier,
		FunctionModifier: FunctionModifier,
		Kind: Kind,
		MemberModifier: MemberModifier,
		MethodModifier: MethodModifier,
		ParameterModifier: ParameterModifier,
		ScopeModifier: ScopeModifier,
		UnaryOperator: UnaryOperator,
		VariableModifier: VariableModifier
	};
}